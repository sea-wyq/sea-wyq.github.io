<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>k8s on WYQ BLOG</title><link>https://sea-wyq.github.io/categories/k8s/</link><description>Recent content in k8s on WYQ BLOG</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 16 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://sea-wyq.github.io/categories/k8s/index.xml" rel="self" type="application/rss+xml"/><item><title>k8s-StatefulSet基础组件解析</title><link>https://sea-wyq.github.io/2022/07/k8s-statefulset%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E8%A7%A3%E6%9E%90/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://sea-wyq.github.io/2022/07/k8s-statefulset%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E8%A7%A3%E6%9E%90/</guid><description>&lt;p>应用场景&lt;/p>
&lt;ul>
&lt;li>稳定的不共享持久化存储：即每个pod的存储资源是不共享的，且pod重新调度后还是能访问到相同的持久化数据，基于pvc实现。&lt;/li>
&lt;li>稳定的网络标志：即pod重新调度后其PodName和HostName不变，且PodName和HostName是相同的，基于Headless Service来实现的。&lt;/li>
&lt;li>有序部署，有序扩展：即pod是有顺序的，在部署或者扩展的时候是根据定义的顺序依次依序部署的（即从0到N-1,在下一个Pod运行之前所有之前的pod必都是Running状态或者Ready状态），是基于init containers来实现的。&lt;/li>
&lt;li>有序收缩：在pod删除时是从最后一个依次往前删除，即从N-1到0.&lt;/li>
&lt;/ul></description></item><item><title>k8s-Deployment基础组件解析</title><link>https://sea-wyq.github.io/2022/07/k8s-deployment%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E8%A7%A3%E6%9E%90/</link><pubDate>Thu, 14 Jul 2022 00:00:00 +0000</pubDate><guid>https://sea-wyq.github.io/2022/07/k8s-deployment%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E8%A7%A3%E6%9E%90/</guid><description>&lt;p>Deployment对象，顾名思义，是用于部署应用的对象。它使Kubernetes中最常用的一个对象，它为ReplicaSet和Pod的创建提供了一种声明式的定义方法&lt;/p></description></item><item><title>k8s-Pod基础组件解析</title><link>https://sea-wyq.github.io/2022/07/k8s-pod%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E8%A7%A3%E6%9E%90/</link><pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate><guid>https://sea-wyq.github.io/2022/07/k8s-pod%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E8%A7%A3%E6%9E%90/</guid><description>&lt;p>Pod是Kubernetes中能够创建和部署的最小单元，是Kubernetes集群中的一个应用实例。&lt;/p>
&lt;ul>
&lt;li>单容器Pod，最常见的应用方式。&lt;/li>
&lt;li>多容器Pod，对于多容器Pod，Kubernetes会保证所有的容器都在同一台物理主机或虚拟主机中运行。&lt;/li>
&lt;/ul></description></item></channel></rss>